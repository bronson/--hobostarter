== WARNING OBSOLETE !!!!

This branch uses symlinks to link in the Hobo plugin.  This is not a
good approach and has been abandoned.  Use master instead.


=== by-symlink

This symlinks each plugin, i.e. ln -s vendor/hobo/hobo vendor/plugins/hobo.
It works but it results in duplicated code in the tree, messing up grepping
and IDEs.  Also, symlinks have problems on Windows.

Verdict: not good.


=== by-env:

This technique puts the Hobo tree in vendor/hobo, then adds a line to
config/environment.rb to include the plugins in manually.
It's promising but:

- It requires a change in Rails 2.1 for Hobo generators to work.
  Rails 2.0.2 is not new enough.

- Hobo hard-codes the taglibs path to be 'vendor/plugins'
  taglib_filename in taglib.rb needs to be fixed so it will work in vendor/hobo.

Verdict: Promising but Rails 2.2 needs to be released first.
  

=== by-plugin:

This just throws the entire Hobo repo as a submodule in vendor/plugins.
It works because Rails recursively searches vendor/plugins for plugins,
so it finds multiple plugins in Hobo.
It's promising but:

- It also includes will_paginate and the rspec plugins in your app.

- It requires a change to Hobo to work.  This is hard-coded:
CORE_TAGLIB        = { :src => "core", :plugin => "hobo" }

Verdict: looks great.  If Hobo can be fixed to not hard-code this,
this is probably the best way to go.


== Welcome to Hobostarter

Starting a Hobo project and following upstream changes has never
been so easy.


== Getting Started

There is no need to install Rails or Hobo gems.  Just make sure
you have Ruby and Git installed.

  1. $ git clone git://github.com/bronson/hobostarter.git MYAPP
  2. $ cd MYAPP
  3. $ git submodule init
  4. $ git submodule update
  5. $ rake db:migrate

That's it.  Now fire up script/server and start hacking!  Some immediate
customizations:

  * Delete the README.hobostarter and CHANGES.hobostarter files.
  * Change your application's name in app/views/taglibs/application.dryml.


=== Pushing Your Changes

If your repo considers Hobostarter to be the origin, you need to point it
at your upstream repo instead.

  1. $ git config remote.origin.url MYREMOTEURL
  2. $ git push origin master


== Submodule Versions

To see what version each module is set to:

  1. $ git submodule status

To use a different version (for instance, if Hobostarter ships
with v0.7.3.99, but you you want to use 0.7.3 in your app):

  1. $ cd vendor/plugins/hobo
  2. $ git checkout v0.7.3
    2.1 $ git fetch --tags	# optional: fetch all upstream tags
    2.2 $ git tag -l		# and show them

Now your app is using 0.7.3 locally.  If you want to push this
change so that everybody will use 0.7.3, you need to commit it:

  3. $ cd ../../..
  4. $ git add vendor/plugins/hobo

When others pull, they must call 'git submodule update'.


== Pulling Upstream Changes

Submodules work like any other git repo.  Just cd vendor/plugins/hobo
and git fetch as usual.

TODO: say more.


== Modifying Submodules

Always push commits from submodules before pushing commits from the
superproject.  Otherwise, if someone clones the superproject, git
will complain that it can't check out the proper version for the
subproject because, of course, you haven't pushed it yet!

TODO: say more.


== Changing the User Name

Hobostarter ships with a user model already created because is what the
vast majority of applications want.  However, if your users are called
something different, say admins, you need to revert Hobostarter's commit
and supply your own.

  1. $ git revert ":/script/generate hobo_user_model user"
  2. $ script/generate hobo_user_model admin
  3. $ script/generate hobo_user_controller admin

And commit your changes.


== Author

If you have any questions: bronson on irc.freenode.net #hobo
or brons_hobostarter@rinspin.com
