<!-- Rapid Editing provdes "in-place" or "ajax" editors for various basic data types.
  
This area of Hobo has had less attention that the non-ajax forms of late, so it's lagging a little. There may be some rough edges. For example, the tags in this library do not (yet!) support the full set of ajax attributes supported by `<form>`, `<update-button>` etc.
  
-->

<!-- Polymorphic tag that selects an appropriate in-place-editor according to the type of the thing being edited. `<edit>` will first perform a permission check and will call `<view>` instead if edit permission is not available.
  -->
<def tag="editor" ><%= 
  if !can_edit?
    view(attributes)
  else
    attrs = add_classes(attributes, type_id, type_and_field, "editor")
    if (refl = this_field_reflection)
      if refl.macro == :belongs_to
        belongs_to_editor(attrs)
      else
        has_many_editor(attrs)
      end
    else
      call_polymorphic_tag("editor", attrs) or
        raise HoboError.new("<editor> not implemented for #{this.class.name}\##{this_field} " +
                            "(#{this.inspect}:#{this_type})")
    end
  end
%></def>


<!-- Not implemented - you just get links to the items in the collection -->
<def tag="has-many-editor">
  <% #TODO: Implement %>
  <a merge-attrs/>
</def>
  
<!-- Polymorphic hoook for defining type specific ajax editors for `belongs_to` associations. The default is `<select-one-editor>` -->
<def tag="belongs-to-editor" polymorphic><%= select_one_editor(attributes) %></def>

<!-- Provides a simple Scriptaculous in-place-editor that uses an `<input type='text'>` -->
<def tag="editor" for="string"><%= in_place_editor attributes %></def>

<!-- Provides a simple Scriptaculous in-place-editor that uses a `<textarea>` -->
<def tag="editor" for="text"><%= in_place_editor attributes %></def>
  
<!-- Provides a simple Scriptaculous in-place-editor that uses a `<textarea>`.
  A JavaScript hook is available in order to replace the simple textarea with a rich-text editor.
  For an example, see the [hoboyui](http://github.com/tablatom/hoboyui) plugin -->
<def tag="editor" for="html"><%= in_place_editor attributes %></def>

<!-- Provides a simple Scriptaculous in-place-editor that uses an `<input type='text'>` -->
<def tag="editor" for="datetime"><%= in_place_editor attributes %></def>

<!-- Provides a simple Scriptaculous in-place-editor that uses an `<input type='text'>` -->
<def tag="editor" for="date"><%= in_place_editor attributes %></def>

<!-- Provides a simple Scriptaculous in-place-editor that uses an `<input type='text'>` -->
<def tag="editor" for="integer"><%= in_place_editor attributes %></def>

<!-- Provides a simple Scriptaculous in-place-editor that uses an `<input type='text'>` -->
<def tag="editor" for="float"><%= in_place_editor attributes %></def>

<!-- Provides a simple Scriptaculous in-place-editor that uses an `<input type='text'>` -->
<def tag="editor" for="big_integer"><%= in_place_editor attributes %></def>

<!-- Raises an error - passwords cannot be edited in place -->
<def tag="editor" for="password"><% raise HoboError, "passwords cannot be edited in place" %></def>

<!-- calls `<boolean-checkbox-editor>` -->
<def tag="editor" for="boolean"><boolean-checkbox-editor merge-attrs/></def>

<!-- Provides an editor that uses a `<select>` menu. Uses the `<string-select-editor>` tag. -->
<def tag="editor" for="HoboFields::EnumString">
 <string-select-editor values="&this_type.values" merge/>
</def>

<!-- Provides a `<select>` menu with an ajax callback to update a `belongs_to` relationship when changed.
  By default the menu contains every record in the target model's table.
  
### Attributes
 
 - include-none: Should the menu include a "none" option (true/false). Defaults: false, or true if the association is nil at render-time.
 
 - blank-message: The text for the "none" option. Default: "(No Product)" (or whatever the model name is)
 
 - sort: Sort the options (true/false)? Default: false
 
 - update: one or more DOM ID's (comma separated string or an array) to be updated as part of the ajax call. 
 
   NOTE: yes that's *DOM ID's* not part-names. A common source of confusion because by default the part name and DOM ID are the same.

  -->
<def tag="select-one-editor" attrs="include-none, blank-message, sort, update"><%
  raise HoboError.new("Not allowed to edit") unless can_edit?
  blank_message ||= "(No #{this_type.name.to_s.titleize})"
  select_options = this_field_reflection.klass.find(:all).select {|x| can_view?(x)}.map {|x|
            [ name(:with => x, :no_wrapper => true), x.id ]
          }
   select_options = select_options.sort if sort
   select_options.insert(0, [blank_message, ""]) if this.nil? || include_none
   f = ajax_updater(object_url(this_parent, :method => :put),
                    update,
                    :method => "put",
                    :params => { this_parent.class.name.underscore => {
                        this_field_reflection.primary_key_name => Hobo.raw_js('this.value')
                      } })
    %>
  <select onchange="#{f}" merge-attrs>
     <%= options_for_select(select_options, this ? this.id : "") %>
  </select>
</def>

<!-- Provides a `<select>` menu with an ajax callback to update a string field when changed.
  
### Attributes

 - values: The values for the menu options. Required
 
 - Labels: A hash that can be used to customise the labels for the menu.
   Any value that does not have a corresponding key in this hash will have its label
   generated by `value.titleize`
   
 - titleize: Set to false to have the default labels be the same as the values. Default: true - the labels are generated by `value.titleize`
 
 - update: one or more DOM ID's (comma separated string or an array) to be updated as part of the ajax call. 

    NOTE: yes that's *DOM ID's* not part-names. A common source of confusion because by default the part name and DOM ID are the same.
  
  -->
<def tag="string-select-editor" attrs="update, values, labels, titleize"><%
  raise HoboError.new("Not allowed to edit") unless can_edit?

  values = comma_split(values)
  labels ||= {}
  titleize = true if titleize.nil?
  options = values.map {|v| [labels.fetch(v.to_sym, titleize ? v.titleize : v), v] }
  
  f = ajax_updater(object_url(this_parent, :method => :put),
                   update,
                   :method => "put",
                   :params => { this_parent.class.name.underscore => {
                       this_field => Hobo.raw_js('this.value')
                    } })
%>
  <select onchange="#{f}" merge-attrs>
    <%= options_for_select(options, this) %>
  </select>
</def>

<!-- A checkbox with an ajax callback to update a boolean field when clicked.
  
### Attributes 

 - update: one or more DOM ID's (comma separated string or an array) to be updated as part of the ajax call. 

    NOTE: yes that's *DOM ID's* not part-names. A common source of confusion because by default the part name and DOM ID are the same.
    
 - message: A message to display in the ajax-progress spinner. Default: "Saving..."
 
  -->
<def tag="boolean-checkbox-editor" attrs="update, message"><%
  raise HoboError.new("Not allowed to edit") unless can_edit?
  f = ajax_updater(object_url(this_parent, :method => :put),
                   update,
                   :method => "put",
                   :message => message,
                   :spinner_next_to => Hobo.raw_js("this"),
                   :params => { this_parent.class.name.underscore => {
                       this_field => Hobo.raw_js('this.checked')
                    } })
%>
  <input type="checkbox" value="1" onclick="#{f}"
         merge-attrs="& this ? attributes.merge(:checked => 'checked') : attributes" />
</def>


<!-- nodoc. -->
<def tag="sti-type-editor" attrs="update">
  <% base_class = this.class
     base_class = base_class.superclass while base_class.superclass != ActiveRecord::Base
   f = ajax_updater("#{base_url}/#{controller_for base_class}/#{this.id}",
                    update,
                    :method => "put",
                    :params => { base_class.name.underscore => {
                        "type" => Hobo.raw_js('this.value')
                    } })
  %>

  <select onchange="#{f}">
    <%= parameters.default || options_for_select(base_class.send(:subclasses).map{|x| [x.name.titleize, x.name]},
                                                 this.class.name) %>
  </select>
</def>


<!-- Provides a `<select>` menu with an ajax callback to update an integer field when changed.
  
### Attributes

 - min: The minimum end of the range of numbers to include
 
 - max: A male name, short for Maximilian

 - options: An array of numbers to use if min..max is not enough for your needs.
 
 - nil-option: Label to give if the current value is nil. Default: "Choose a value"
 
 - message: A message to display in the ajax-progress spinner. Default: "Saving..."
 
 - update: one or more DOM ID's (comma separated string or an array) to be updated as part of the ajax call. 

    NOTE: yes that's *DOM ID's* not part-names. A common source of confusion because by default the part name and DOM ID are the same.
  
  -->
<def tag="integer-select-editor" attrs="options, min, max, update, nil-option, message">
 <% options ||= (min.to_i..max.to_i).to_a %>
 <select class="number-editor-bhv #{model_id_class} #{'update:' + comma_split(update).join(':') unless update.blank?}"
          merge-attrs="&message ? attributes.merge(:hobo_message => message) : attributes">
   <if test="&this.nil?"><option value=""><%= nil_option || "Choose a value" %></option></if>
   <%= options_for_select(options.*.to_s, this) %>
 </select>
</def>


<!-- nodoc. -->
<def tag="has-many-checkbox-editor" attrs="model, update, message"><%=
  raise HoboError.new("no update specified") unless update

  fields = attributes.delete_if{|k,v|!k.ends_with? "_id"}
  conditions = fields.map{|k,v|"#{k}=#{v}"}.join " AND "

  klass = model.is_a?(String) ? model.constantize : model
  obj = klass.find(:first, :conditions => conditions)

  checkbox_attrs = {:type =>'checkbox'}
  
  if obj == nil
    new = klass.new(fields)
    permission = if can_create?(new)
      class_name = new.class.name.underscore
      ajax_options = { :message => message }
      ajax_options[:params] = { class_name => fields } unless fields.empty?
      checkbox_attrs[:onclick] = ajax_updater(object_url(new.class, :method => :post), update, ajax_options)
    end
  else
    permission = if can_delete?(obj)
      checkbox_attrs[:checked] = 'checked'
      message ||= "Unsetting #{obj.class.name.titleize}"
      class_name = obj.class.name.underscore
      checkbox_attrs[:onclick] = ajax_updater(object_url(obj, :method => :delete), update, {:message => message, :method => 'delete'})                          
    end
  end
  element(:input, add_classes(attributes.merge(checkbox_attrs),
                              "checkbox_input has_many_checkbox has_many_#{class_name}_checkbox")) if permission
%></def>

<!-- nodoc. -->
<def tag="has-many-checkbox-editors">
  <table>
    <tr:>
      <td><has-many-checkbox-editor param="editor" merge-attrs/></td>
      <td><name param/></td>
    </tr>
  </table>
</def>
